#! /bin/sh

# Set these
APP_NAME="<UPDATE>";
APP_OWNER="<UPDATE>";
APP_OWNER_EMAIL="<UPDATE>";

# These should be generated automagically
UID=$(id -u);
GID=$(id -g);
APP_USER=$USER;
APP_USER_ID=$UID;
APP_GROUP_ID=$GID;
HOME_DIR=$HOME;

# Export vars so they are passed to docker/compose
export APP_NAME;
export APP_OWNER;
export APP_OWNER_EMAIL;
export UID;
export GID;
export APP_USER;
export APP_USER_ID;
export APP_GROUP_ID;
export HOME_DIR;

CMD=$1;

# Builds a Shazam docker container.
build_container() {
  docker compose \
    --file docker-compose.yaml \
    build --no-cache \
      --build-arg APP_NAME=$APP_NAME \
      --build-arg APP_OWNER="$APP_OWNER" \
      --build-arg APP_OWNER_EMAIL="$APP_OWNER_EMAIL" \
      --build-arg APP_USER=$USER \
      --build-arg APP_USER_ID=$UID \
      --build-arg APP_GROUP_ID=$GID \
      --build-arg HOME_DIR=$HOME;
}

# Initializes a Shazam project and copies the files from the 
# container to the host.
init_project() {
  docker container run -itd --name=shazam-tmp bwks/shazam ash \
    && docker container cp shazam-tmp:$HOME/$APP_NAME $APP_NAME \
    && docker container cp shazam-tmp:$HOME/config config \
    && docker container kill shazam-tmp \
    && docker container rm shazam-tmp;

  echo "{}" >> .shazam_template_hashes.json;
}

case $1 in
  # Bring up the project container
  "up" | "")
    docker compose \
      --file docker-compose.yaml \
      up;
    ;;

  # Destroy the project container
  "down" | "rm")
    docker compose \
      --file docker-compose.yaml \
      down;
    ;;

  # Build the project container
  "build")
    build_container;
    ;;

  # Initialize a Shazam project
  "init")
    if [ -d "./config/" ]; then
      echo "ERROR => Looks like the project is already initialized.";
      echo "INFO  => Are you trying to (re)build the shazam conainer?";
      echo "INFO  => Use 'bin/dev build' instead.";
      exit 1;
    fi

    build_container;
    init_project;
    ;;

  *)
    echo "ERROR => Unknown command '$1'";
    ;;
esac